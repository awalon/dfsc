name: Rust-Release

on:
  push:
    #branches: [ "main" ]
    tags:
      - "v*.*.*"
  #pull_request:
  #  branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always


jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: taiki-e/create-gh-release-action@v1
        with:
          # (optional) Path to changelog.
          #changelog: CHANGELOG.md
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          # Universal macOS binary is supported as universal-apple-darwin.
          - target: universal-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/checkout@v3
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: dfsc
          # (optional) Target triple, default is host triple.
          target: ${{ matrix.target }}
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}
          # Comma-separated list of algorithms to be used for checksum (sha256, sha512, sha1, or md5)
          #checksum: sha512 # optional

    #- name: Build and upload Rust binary to GitHub Releases
      # You may pin to the exact commit or the version.
      # uses: taiki-e/upload-rust-binary-action@ff1be0eb3d9d68abc25fa700fc9357cbf3b4baea
     # uses: taiki-e/upload-rust-binary-action@v1.12.0
       #with:
        # Comma-separated list of binary names (non-extension portion of filename) to build and upload. Note that glob pattern is not supported yet.
     #   bin: target/release/dfsc
        # Archive name (non-extension portion of filename) to be uploaded (variables `$bin`, `$target`, `$tag`, and any string)
        #archive: # optional, default is $bin-$target
        # Target name, default is host triple
        #target: # optional
        # Comma-separated list of cargo build features to enable
        #features: # optional
        # Whether to disable cargo build default features
        #no_default_features: # optional, default is false
        # Override cargo manifest path
        #manifest_path: # optional
        # On which platform to distribute the `.tar.gz` file (all, unix, windows, or none)
        #tar: # optional, default is unix
        # On which platform to distribute the `.zip` file (all, unix, windows, or none)
        #zip: # optional, default is windows
        # Comma-separated list of additional files to be included to archive. Note that glob pattern is not supported yet.
        #include: # optional
        # Comma-separated list of additional files to be uploaded separately. Note that glob pattern is not supported yet.
        #asset: # optional
        # Whether to create the leading directory in the archive or not
        #leading_dir: # optional, default is false
        # Tool to build binaries (cargo or cross)
        #build_tool: # optional
        # Comma-separated list of algorithms to be used for checksum (sha256, sha512, sha1, or md5)
      #  checksum: sha512 # optional
        # GitHub token for creating GitHub Releases.
        # If not set this option, the GITHUB_TOKEN environment variable will be used.
        #token: # optional
        # Fully-formed tag ref for this release.
        # If not set this option, the GITHUB_REF environment variable (automatically set by GitHub Actions) will be used.
        #ref: # optional


#      - name: Release - macos/ubuntu
#        uses: softprops/action-gh-release@v1
#        if: ( matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' ) && startsWith(github.ref, 'refs/tags/')
#        with:
#          files: |      
#            target/release/dfsc
#      - name: Release - windows
#        uses: softprops/action-gh-release@v1
#        if: ( matrix.os == 'windows-latest' ) && startsWith(github.ref, 'refs/tags/')
#        with:
#          files: |      
#            target/release/dfsc.exe
      - name: Archive production artifacts for ${{ matrix.os }}
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}-release
          path: |
            target/*/*/dfsc*
            !target/*/*/deps*
            !target/*/*/*.pdb
            !target/*/*/*.d
            #!target/*/*/*.md


#  build:
#    strategy:
#      matrix:
#        os: [ubuntu-latest, windows-latest, macos-latest]
#        rust: [stable]
##        include:
##        - os: debian-latest
##          sccache-path: /home/runner/.cache/sccache
##        - os: macos-latest
##          sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
#        
#    name: ${{ matrix.make.name }} (${{ matrix.os }})
#    runs-on: ${{ matrix.os }}
#    #runs-on: ubuntu-latest
#    
#    env:
#      RUST_BACKTRACE: full
#      SCCACHE_GHA_ENABLED: "true"
#      #RUSTC_WRAPPER: "sccache"
#      RUSTV: ${{ matrix.rust }}
#      #SCCACHE_CACHE_SIZE: 2G
#      # SCCACHE_DIR: ${{ matrix.sccache-path }}
#      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
#      
#    steps:
#    - uses: actions/cache@v3
#      with:
#        path: |
#          ~/.cargo/bin/
#          ~/.cargo/registry/index/
#          ~/.cargo/registry/cache/
#          ~/.cargo/git/db/
#          target/
#        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#------
#    - name: Run sccache-cache
#      uses: mozilla-actions/sccache-action@v0.0.3    
#    - name: Run sccache stat for check
#      shell: bash
#      run: ${SCCACHE_PATH} --show-stats
#    - uses: actions/checkout@v3
#    - name: Install sccache (debian-latest)
#      if: matrix.os == 'debian-latest'
#      env:
#        LINK: https://github.com/mozilla/sccache/releases/download
#        SCCACHE_VERSION: 0.2.13
#      run: |
#        SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
#        mkdir -p $HOME/.local/bin
#        curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
#        mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
#        echo "$HOME/.local/bin" >> $GITHUB_PATH          
#    - name: Install sccache (macos-latest)
#      if: matrix.os == 'macos-latest'
#      run: |
#        brew update
#        brew install sccache        
#    - name: Cache cargo registry
#      uses: actions/cache@v2
#      continue-on-error: false
#      with:
#        path: |
#          ~/.cargo/registry
#          ~/.cargo/git            
#        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#        restore-keys: |
#                      ${{ runner.os }}-cargo-
#    - name: Save sccache
#      uses: actions/cache@v2
#      continue-on-error: false
#      with:
#        path: ${{ matrix.sccache-path }}
#        key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
#        restore-keys: |
#                      ${{ runner.os }}-sccache-
#    - name: Start sccache server
#      run: sccache --start-server
#-------
#    #- name: ${{ matrix.make.name }}
#    #  run: make ${{ matrix.make.task }}
#    - name: Build
#      run: cargo build --release --verbose
#    #- name: Run tests
#    #  run: cargo test --verbose
##    - name: Print sccache stats
##      run: sccache --show-stats
##    - name: Stop sccache server
##      run: sccache --stop-server || true


#    - name: Archive code coverage results
#      uses: actions/upload-artifact@v3
#      with:
#        name: code-coverage-report
#        path: output/test/code-coverage.html
